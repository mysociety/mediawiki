#!/usr/bin/env python
#
# Fetch list of email addresses in our Google Apps domain.

import re
import sys
import logging
from collections import defaultdict

from googleapiclient.discovery import build
from oauth2client.service_account import ServiceAccountCredentials
from googleapiclient import errors

from httplib2 import Http
from StringIO import StringIO
from mediawiki import MediaWiki

sys.stdout = StringIO()
logger = logging.getLogger('wikibot')

SERVICE_ACCOUNT_EMAIL = 'email-lookup-service@internal-179008.iam.gserviceaccount.com'
SERVICE_ACCOUNT_PKCS12_FILE_PATH = '/etc/mysociety/google_apps_api_key.p12'
SCOPES = ['https://www.googleapis.com/auth/admin.directory.user.readonly',
          'https://www.googleapis.com/auth/admin.directory.group.readonly']
DELEGATE_USER = 'api-target-user@mysociety.org'

def get_directory():
    "Return an authenticated connection to the Admin SDK API."

    credentials = ServiceAccountCredentials.from_p12_keyfile(
        SERVICE_ACCOUNT_EMAIL,
        SERVICE_ACCOUNT_PKCS12_FILE_PATH,
        'notasecret',
        scopes=SCOPES)

    credentials = credentials.create_delegated(DELEGATE_USER)

    return build('admin', 'directory_v1', credentials=credentials)

useradmin = get_directory()

# Generate output data
print '== Users ==\n'

sort_order = (
    '/Admins and super admins', '/Staff users', '/Non-staff users',
    '/Non-staff users/Former staff', '/Support mailboxes',
    '/Special-purpose mailboxes')


def sort_in_order(i):
    try:
        return sort_order.index(i)
    except:
        return float('inf')

response = useradmin.users().list(customer='my_customer').execute()
x = defaultdict(list)
[x[r['orgUnitPath']].append(r) for r in response['users']]
for unit in sorted(x, key=sort_in_order):
    print '=== %s ===\n' % unit
    for r in sorted(x[unit], key=lambda a: a['name']['fullName']):
        aliases = ' (' + ' '.join(r['aliases']) + ')' if r.get('aliases') else ''
        print '* %s %s%s' % (r['name']['fullName'], r['primaryEmail'], aliases)
    print

print '== Groups ==\n'

GROUPS_URL = 'https://groups.google.com/a/mysociety.org/forum/#!forum/%s'

response = useradmin.groups().list(domain='mysociety.org').execute()
for r in response['groups']:
    email = r['email'].replace('@mysociety.org', '')
    url = GROUPS_URL % email
    print '=== %s ([%s %s]) ===\n' % (r['name'], url, email)
    if r.get('aliases'):
        print 'Aliases: %s\n' % ', '.join(r['aliases'])
    members = useradmin.members().list(groupKey=r['id']).execute()
    members = members.get('members', [])
    if email in ('mysociety-community', 'fixmystreet', 'theyworkforyou'):
        print "* '''This is a public list with %d members'''" % len(members)
        continue
    for member in members:
        role = '(Owner)' if member['role'] == 'OWNER' else ''
        typ = '(Group)' if member['type'] == 'GROUP' else ''
        print '* %s %s %s' % (member['email'], role, typ)
    print


# Update wiki
text = sys.stdout.getvalue()
mw = MediaWiki()
mw.replace_page_part('Email', text, 'LIST OF GOOGLE USERS AND GROUPS', 'END OF LIST OF GOOGLE USERS AND GROUPS', 'Updating email data')
