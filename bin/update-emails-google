#!/usr/bin/env python
#
# Fetch list of email addresses in our Google Apps domain.

import re
import sys
import logging
from collections import defaultdict
from oauth2client.client import SignedJwtAssertionCredentials
from apiclient.discovery import build
from httplib2 import Http
from StringIO import StringIO
from mediawiki import MediaWiki

sys.stdout = StringIO()
logger = logging.getLogger('wikibot')

client_id = 'email-lookup-service@internal-179008.iam.gserviceaccount.com'
sub_user = 'api-target-user@mysociety.org'
api_key_file = '/etc/mysociety/google_apps_api_key.p12'

with open(api_key_file) as f:
    private_key = f.read()

credentials = SignedJwtAssertionCredentials(
    client_id, private_key,
    'https://www.googleapis.com/auth/admin.directory.user.readonly',
    sub=sub_user)
http_auth = credentials.authorize(Http())
useradmin = build('admin', 'directory_v1', http=http_auth)

# Generate output data
print '== Users ==\n'

sort_order = (
    '/Admins and super admins', '/Staff users', '/Non-staff users',
    '/Non-staff users/Former staff', '/Support mailboxes',
    '/Special-purpose mailboxes')


def sort_in_order(i):
    try:
        return sort_order.index(i)
    except:
        return float('inf')

response = useradmin.users().list(customer='my_customer').execute()
x = defaultdict(list)
[x[r['orgUnitPath']].append(r) for r in response['users']]
for unit in sorted(x, key=sort_in_order):
    print '=== %s ===\n' % unit
    for r in sorted(x[unit], key=lambda a: a['name']['fullName']):
        aliases = ' (' + ' '.join(r['aliases']) + ')' if r.get('aliases') else ''
        print '* %s %s%s' % (r['name']['fullName'], r['primaryEmail'], aliases)
    print

credentials = SignedJwtAssertionCredentials(
    client_id, private_key,
    'https://www.googleapis.com/auth/admin.directory.group.readonly',
    sub=sub_user)

http_auth = credentials.authorize(Http())
groupadmin = build('admin', 'directory_v1', http=http_auth)

print '== Groups ==\n'

GROUPS_URL = 'https://groups.google.com/a/mysociety.org/forum/#!forum/%s'

response = groupadmin.groups().list(domain='mysociety.org').execute()
for r in response['groups']:
    email = r['email'].replace('@mysociety.org', '')
    url = GROUPS_URL % email
    print '=== %s ([%s %s]) ===\n' % (r['name'], url, email)
    if r.get('aliases'):
        print 'Aliases: %s\n' % ', '.join(r['aliases'])
    members = groupadmin.members().list(groupKey=r['id']).execute()
    members = members.get('members', [])
    if email in ('mysociety-community', 'fixmystreet', 'theyworkforyou'):
        print "* '''This is a public list with %d members'''" % len(members)
        continue
    for member in members:
        role = '(Owner)' if member['role'] == 'OWNER' else ''
        typ = '(Group)' if member['type'] == 'GROUP' else ''
        print '* %s %s %s' % (member['email'], role, typ)
    print


# Update wiki
text = sys.stdout.getvalue()
mw = MediaWiki()
mw.replace_page_part('Email', text, 'LIST OF GOOGLE USERS AND GROUPS', 'END OF LIST OF GOOGLE USERS AND GROUPS', 'Updating email data')
